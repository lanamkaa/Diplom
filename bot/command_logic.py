valid_commands = ["start", "services", "ask", "help", "feedback", "check_link", "analyze"]

keyword_groups = {
    'start': ['–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç', '–∑–∞–ø—É—Å–∫', '–¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º', '–ø–æ–µ—Ö–∞–ª–∏', 'start', 'go', 'begin'],
    'services': ['—É—Å–ª—É–≥–∏', '—Å–µ—Ä–≤–∏—Å—ã', 'service', '–ø–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã', '–¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏', '–∫–∞–∫–∏–µ –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å—ã', 'services', 'tools'],
    'ask': ['–≤–æ–ø—Ä–æ—Å', '—Å–ø—Ä–æ—Å–∏—Ç—å', 'ask', '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', '–∑–∞–¥–∞—Ç—å –≥–ø—Ç', '—É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å', 'question', 'ask a question'],
    'help': ['–ø–æ–º–æ—â—å', '—Å–ø—Ä–∞–≤–∫–∞', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '–∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 'assist', 'support', 'guide'],
    'feedback': ['–æ—Ç–∑—ã–≤', '—Ñ–∏–¥–±–µ–∫', 'feedback', '–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤', '–º–Ω–µ–Ω–∏–µ', 'review', 'comment'],
    'check_link': ['—Å—Å—ã–ª–∫–∞', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å', 'link', '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏', '—Å—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Å—ã–ª–∫—É', 'check link', 'is link safe', 'verify url'],
    'analyze': ['–∞–Ω–∞–ª–∏–∑', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'analyze', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤', '–∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤', '–æ—Ç—á–µ—Ç', 'report', 'statistics']
}

layout_map = str.maketrans(
    "qwertyuiop[]asdfghjkl;'zxcvbnm,./",
    "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é."
)
reverse_layout_map = str.maketrans(
    "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.",
    "qwertyuiop[]asdfghjkl;'zxcvbnm,./"
)

def normalize(text):
    return text.strip().lower()

def fix_layout_ru_to_en(text):
    return text.translate(reverse_layout_map)

def fix_layout_en_to_ru(text):
    return text.translate(layout_map)

def levenshtein_distance(s1, s2):
    if len(s1) < len(s2): return levenshtein_distance(s2, s1)
    if not s2: return len(s1)
    prev_row = range(len(s2) + 1)
    for i, c1 in enumerate(s1):
        curr_row = [i + 1]
        for j, c2 in enumerate(s2):
            insert = prev_row[j + 1] + 1
            delete = curr_row[j] + 1
            replace = prev_row[j] + (c1 != c2)
            curr_row.append(min(insert, delete, replace))
        prev_row = curr_row
    return prev_row[-1]

def find_closest_command(user_input):
    min_distance = float("inf")
    closest = None
    for cmd in valid_commands:
        dist = levenshtein_distance(user_input, cmd)
        if dist <= 2 and dist < min_distance:
            min_distance = dist
            closest = cmd
    return closest

def handle_command_input(user_input):
    user_input = normalize(user_input)
    is_command = user_input.startswith("/")
    text = user_input[1:] if is_command else user_input

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É
    for fix_func in [fix_layout_ru_to_en, fix_layout_en_to_ru]:
        fixed = fix_func(text)
        if fixed in valid_commands:
            return f"üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É /{fixed}?"

    # 2. –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    for cmd, keywords in keyword_groups.items():
        for keyword in keywords:
            if keyword in text:
                return f"üí° –ü–æ—Ö–æ–∂–µ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É /{cmd}"

    # 3. –ü–æ–∏—Å–∫ –ø–æ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω—É
    closest_cmd = find_closest_command(text)
    if closest_cmd:
        if is_command:
            return f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É /{closest_cmd}?"
        else:
            return f"ü§î –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ '{user_input}'. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É /{closest_cmd}?"

    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return "ü§∑ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" + "\n".join(f"/{cmd}" for cmd in valid_commands)
