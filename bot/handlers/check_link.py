import re
import ipaddress
from urllib.parse import urlparse, unquote

import idna
from telegram.ext import CommandHandler, ConversationHandler, MessageHandler, filters
from .common import cancel
from ..database.statistics.create_statistic import create_link_statistic
import time
from ..database.statistics.statistics import get_url_statistics

CHECK_LINK_TEXT = range(1)

TRUSTED_DOMAIN = "nstu.ru"

def is_safe_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ URL:
      - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTTPS.
      - –ù–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç –Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–π –ø–æ—Ä—Ç 443).
      - –ò–º–µ–µ—Ç –∏–º—è —Ö–æ—Å—Ç–∞, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–º—É –¥–æ–º–µ–Ω—É (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ–¥–¥–æ–º–µ–Ω—ã).
      - –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥–∏—Ä–æ–≤–∫–∏ URL –∏–ª–∏ –ø–æ–¥–º–µ–Ω—ã Unicode.
      - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP-–∞–¥—Ä–µ—Å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞.
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è URL-encoding —Ç—Ä—é–∫–æ–≤.
        decoded_url = unquote(url)
        parsed = urlparse(decoded_url)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º HTTPS.
        if parsed.scheme != "https":
            return False

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞.
        domain = parsed.hostname
        if domain is None:
            return False

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é IDNA –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ–ª–æ–∫ URL.
        try:
            ascii_domain = idna.encode(domain).decode("ascii").lower()
        except idna.IDNAError:
            return False

        # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ö–æ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        if ".." in ascii_domain or re.search(r"[^a-z0-9\.\-]", ascii_domain):
            return False

        # –ë–ª–æ–∫–∏—Ä—É–µ–º IP-–∞–¥—Ä–µ—Å–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∞—Ç–∞–∫–∏ SSRF.
        try:
            ipaddress.ip_address(ascii_domain)
            return False
        except ValueError:
            pass 

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ö–æ—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –¥–æ–º–µ–Ω—É.
        # –†–∞–∑—Ä–µ—à–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –¥–æ–º–µ–Ω—É –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–º.
        if ascii_domain == TRUSTED_DOMAIN or ascii_domain.endswith("." + TRUSTED_DOMAIN):
            return True

        return False

    except Exception:
        return False

async def check_link(update, context):
    await update.message.reply_text(
        "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏! üòä\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è - /cancel"
    )
    return CHECK_LINK_TEXT

async def check_link_response(update, context):
    link = update.message.text
    start = time.time()
    if is_safe_url(link):
        reply = "‚úÖ –°—Å—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞."
    else:
        reply = "‚ùå –°—Å—Å—ã–ª–∫–∞ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞."
    end = time.time()
    create_link_statistic(link, end - start)
    print(get_url_statistics(link, True))
    await update.message.reply_text(reply)
    return ConversationHandler.END

check_link_handler = ConversationHandler(
    entry_points=[CommandHandler("check_link", check_link)],
    states={
        CHECK_LINK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_link_response)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)