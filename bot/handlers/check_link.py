import re
import time
import idna
import ipaddress
from urllib.parse import urlparse, unquote

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler, ConversationHandler, MessageHandler, filters
from .common import cancel
from .states import CHECK_LINK_TEXT
from ..database.statistics.create_statistic import create_link_statistic
from ..database.statistics.statistics import get_url_statistics
from ..database.users.update_last_active import update_last_active_at

TRUSTED_DOMAIN = "nstu.ru"

def is_safe_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL.
    –¢—Ä–µ–±—É–µ—Ç HTTPS, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–º–µ–Ω, –±–ª–æ–∫–∏—Ä—É–µ—Ç IP-–∞–¥—Ä–µ—Å–∞ –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.
    """
    try:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è URL-encoding —Ç—Ä—é–∫–æ–≤.
        decoded_url = unquote(url)
        parsed = urlparse(decoded_url)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º HTTPS.
        if parsed.scheme != "https":
            return False

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ—Å—Ç—å –∏–º—è —Ö–æ—Å—Ç–∞.
        domain = parsed.hostname
        if domain is None:
            return False

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é IDNA –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ–ª–æ–∫ URL.
        try:
            ascii_domain = idna.encode(domain).decode("ascii").lower()
        except idna.IDNAError:
            return False

        # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ö–æ—Å—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        if ".." in ascii_domain or re.search(r"[^a-z0-9\.\-]", ascii_domain):
            return False

        # –ë–ª–æ–∫–∏—Ä—É–µ–º IP-–∞–¥—Ä–µ—Å–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –∞—Ç–∞–∫–∏ SSRF.
        try:
            ipaddress.ip_address(ascii_domain)
            return False
        except ValueError:
            pass 

        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ö–æ—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –¥–æ–º–µ–Ω—É.
        # –†–∞–∑—Ä–µ—à–∏—Ç—å, –µ—Å–ª–∏ –æ–Ω —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–π –¥–æ–º–µ–Ω—É –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–º.
        if ascii_domain == TRUSTED_DOMAIN or ascii_domain.endswith("." + TRUSTED_DOMAIN):
            return True

        return False

    except Exception:
        return False

async def check_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_link.
    –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    context.user_data.clear()

    telegram_id = update.effective_user.id
    update_last_active_at(telegram_id)

    await update.message.reply_text(
        "üîç –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel."
    )
    return CHECK_LINK_TEXT

async def check_link_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ —Å–æ–æ–±—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    telegram_id = update.effective_user.id
    update_last_active_at(telegram_id)

    link = update.message.text
    start = time.time()

    if is_safe_url(link):
        reply = "‚úÖ –°—Å—ã–ª–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞."
    else:
        reply = "‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞."

    end = time.time()
    create_link_statistic(link, end - start)
    print(get_url_statistics(link, detailed=True))

    await update.message.reply_text(reply)
    return ConversationHandler.END

check_link_handler = ConversationHandler(
    entry_points=[CommandHandler("check_link", check_link)],
    states={
        CHECK_LINK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_link_response)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)