from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from ..database.users.get_user import get_user_by_telegram_id
from ..database.users.update_last_active import update_last_active_at
from ..database.users.update_reminder_status import update_reminder_status
from ..handlers.reminders import send_reminders
from ..database.users.create_user import create_user_if_not_exists
from babel.dates import format_datetime
import logging

logger = logging.getLogger(__name__)

def format_date_russian(date):
    """Format date in Russian style: '4 –º–∞—Ä—Ç–∞ 2025 13:16'"""
    if not date:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    return format_datetime(date, format='d MMMM YYYY HH:mm', locale='ru')

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
    """
    telegram_id = update.effective_user.id
    logger.info(f"Profile command received from user {telegram_id}")

    # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not create_user_if_not_exists(telegram_id, update.effective_user.username, update.effective_user.first_name):
        logger.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user = get_user_by_telegram_id(telegram_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    update_last_active_at(telegram_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    keyboard = [
        [
            InlineKeyboardButton(
                "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + ("–í–∫–ª—é—á–µ–Ω—ã" if user[5] else "–í—ã–∫–ª—é—á–µ–Ω—ã"),
                callback_data="toggle_reminders"
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    created_at_str = format_datetime(user[3], format='d MMMM YYYY HH:mm', locale='ru') if user[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    last_active_str = format_datetime(user[4], format='d MMMM YYYY HH:mm', locale='ru') if user[4] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    await update.message.reply_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"ID: {user[0]}\n"
        f"Telegram ID: {telegram_id}\n"
        f"Username: @{user[1]}\n"
        f"–ò–º—è: {user[2]}\n"
        f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at_str}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active_str}\n\n"
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=reply_markup
    )

async def handle_reminder_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    query = update.callback_query
    logger.info(f"Reminder toggle callback received: {query.data}")
    await query.answer()

    telegram_id = update.effective_user.id
    user = get_user_by_telegram_id(telegram_id)
    
    if not user:
        logger.error(f"User {telegram_id} not found when trying to toggle reminders")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ
    current_status = user[5]  # reminder_enabled –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 6-–º —ç–ª–µ–º–µ–Ω—Ç–µ –∫–æ—Ä—Ç–µ–∂–∞
    new_status = not current_status
    logger.info(f"Toggling reminders for user {telegram_id} from {current_status} to {new_status}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if update_reminder_status(telegram_id, new_status):
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton(
                    "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + ("–í–∫–ª—é—á–µ–Ω—ã" if new_status else "–í—ã–∫–ª—é—á–µ–Ω—ã"),
                    callback_data="toggle_reminders"
                )
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        created_at_str = format_datetime(user[3], format='d MMMM YYYY HH:mm', locale='ru') if user[3] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        last_active_str = format_datetime(user[4], format='d MMMM YYYY HH:mm', locale='ru') if user[4] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"ID: {user[0]}\n"
            f"Telegram ID: {telegram_id}\n"
            f"Username: @{user[1]}\n"
            f"–ò–º—è: {user[2]}\n"
            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at_str}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active_str}\n\n"
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=reply_markup
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ job_queue
        if new_status:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ job'–∞
            job_exists = False
            for job in context.job_queue.jobs():
                if job.name == 'send_reminders':
                    job_exists = True
                    break
            
            if not job_exists:
                context.job_queue.run_repeating(
                    send_reminders,
                    interval=3600,  # –∫–∞–∂–¥—ã–π —á–∞—Å
                    first=10,  # –ø–µ—Ä–≤–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    name='send_reminders'
                )
                logger.info(f"Started reminder job for user {telegram_id}")
        else:
            # –£–¥–∞–ª—è–µ–º job, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            for job in context.job_queue.jobs():
                if job.name == 'send_reminders':
                    job.schedule_removal()
                    logger.info(f"Removed reminder job for user {telegram_id}")
    else:
        logger.error(f"Failed to update reminder status for user {telegram_id}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
profile_command = CommandHandler("profile", profile)
reminder_toggle = CallbackQueryHandler(handle_reminder_toggle, pattern="toggle_reminders")

