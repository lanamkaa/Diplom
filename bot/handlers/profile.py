from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode
from ..utils.util import escape_markdown
from ..database.users.get_user import get_user_by_telegram_id
from ..database.users.update_last_active import update_last_active_at


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å: –∏–º—è, username –∏ –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    context.user_data.clear()

    telegram_id = update.effective_user.id
    user = get_user_by_telegram_id(telegram_id)

    if user:
        user_id, username, first_name, created_at, last_active_at = user

        first_name = escape_markdown(first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        username = escape_markdown(username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        created_at_str = escape_markdown(created_at.strftime('%d.%m.%Y %H:%M') if created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        last_active_str = escape_markdown(last_active_at.strftime('%d.%m.%Y %H:%M') if last_active_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        profile_text = (
            "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
            f"*–ò–º—è:* {first_name}\n"
            f"*Username:* @{username}\n"
            f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {created_at_str}\n"
            f"*–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {last_active_str}"
        )
    else:
        profile_text = (
            "üòî *–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.*\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start."
        )

    await update.message.reply_text(profile_text, parse_mode=ParseMode.MARKDOWN_V2)
    update_last_active_at(telegram_id)

    return ConversationHandler.END