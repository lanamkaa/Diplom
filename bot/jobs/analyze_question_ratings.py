from datetime import datetime, timedelta
from bot.database.connect import get_db_connection
from telegram.ext import ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from bot.database.users.create_user import create_user_if_not_exists
import logging

ADMIN_IDS = [888737841, 344532317]

logger = logging.getLogger(__name__)

async def analyze_question_ratings(context: ContextTypes.DEFAULT_TYPE):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏—Ö –ø–æ question_type
    –∏ –≤—ã—è–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É —Å —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π answer_rating.
    """
    try:
        logger.info("Starting analyze_question_ratings job")
        conn = get_db_connection()
        if not conn:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤")
            return

        print("–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
        
        cur = conn.cursor()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥
            week_ago = datetime.now() - timedelta(days=7)
            
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤
            cur.execute("""
                SELECT 
                    question_type,
                    COUNT(*) as question_count,
                    AVG(answer_rating) as avg_rating
                FROM questions 
                WHERE created_at >= %s 
                AND answer_rating IS NOT NULL
                GROUP BY question_type
                ORDER BY avg_rating ASC
            """, (week_ago,))
            
            results = cur.fetchall()
            
            if results:
                lowest_rated = results[0]  # –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –æ—Ü–µ–Ω–∫–æ–π
                message = (
                    f"üìä –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n\n"
                    f"–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –æ—Ü–µ–Ω–∫–æ–π: {lowest_rated[0]}\n"
                    f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {lowest_rated[2]:.2f}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {lowest_rated[1]}\n\n"
                    f"–í—Å–µ —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                )
                
                for q_type, count, rating in results:
                    message += f"- {q_type}: {rating:.2f} ({count} –≤–æ–ø—Ä–æ—Å–æ–≤)\n"
                
                print(message)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                keyboard = [[InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="show_questions_details")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                for admin_id in ADMIN_IDS:
                    try:
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=message,
                            reply_markup=reply_markup
                        )
                        logger.info(f"Successfully sent analysis to admin {admin_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            else:
                logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
        finally:
            cur.close()
            conn.close()
    except Exception as e:
        logger.error(f"Critical error in analyze_question_ratings: {e}")

async def show_questions_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∫–Ω–æ–ø–∫–æ–π "–°–ª–µ–¥—É—é—â–∏–π".
    """
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if user_id not in ADMIN_IDS:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
        current_index = 0
        if query.data != "show_questions_details":
            current_index = int(query.data.split("_")[-1])
        
        conn = get_db_connection()
        if not conn:
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        cur = conn.cursor()
        try:
            week_ago = datetime.now() - timedelta(days=7)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –æ—Ü–µ–Ω–∫–∞–º–∏
            cur.execute("""
                SELECT 
                    question,
                    answer_text,
                    answer_rating,
                    question_type,
                    created_at
                FROM questions 
                WHERE created_at >= %s 
                AND answer_rating IS NOT NULL
                ORDER BY answer_rating ASC, created_at DESC
            """, (week_ago,))
            
            questions = cur.fetchall()
            
            if questions:
                if current_index >= len(questions):
                    await query.edit_message_text("–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.")
                    return
                
                question, answer, rating, q_type, created_at = questions[current_index]
                
                message = (
                    f"üìã –í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {len(questions)}:\n\n"
                    f"‚ùì –í–æ–ø—Ä–æ—Å: {question}\n"
                    f"üìù –û—Ç–≤–µ—Ç: {answer}\n"
                    f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating}\n"
                    f"üìå –¢–∏–ø: {q_type}\n"
                    f"üïí –î–∞—Ç–∞: {created_at.strftime('%Y-%m-%d %H:%M')}\n"
                )
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard = []
                nav_buttons = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—ã–¥—É—â–∏–π" –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                if current_index > 0:
                    nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"show_questions_details_{current_index - 1}"))
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∏–π" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
                if current_index + 1 < len(questions):
                    nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"show_questions_details_{current_index + 1}"))
                
                if nav_buttons:
                    keyboard.append(nav_buttons)
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ø—Ä–æ—Å–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        finally:
            cur.close()
            conn.close()
            
    except Exception as e:
        logger.error(f"Critical error in show_questions_details: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.")

async def analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /analyze –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—Ä—É—á–Ω—É—é.
    """
    user_id = update.effective_user.id
    telegram_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name

       # –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not create_user_if_not_exists(telegram_id, username, first_name):
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")



    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await update.message.reply_text("–ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    await analyze_question_ratings(context)
